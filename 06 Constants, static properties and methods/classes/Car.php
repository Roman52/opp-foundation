<?php 
/*
Свойства и методы не принадлежат классу - они принадлежат объекту (экземпляру класса = $this). На самом деле мы можем оперировать свойствами и методами не только в контексте объектов, но и в контексте класса. Но это должны быть специальные свойства и спец методы. Называются они статическими. Объявляются так:

public static $color;
public static function getInfo() {}

и мы не увидим их через $this->color; потому что они статичные

Если мы добавили свойству или методу класса static - это означает, что их можно использовать не в контексте объекта а именно в контексте класса

Полезны эти статические методы и свойства - когда нам по каким то причинам не хочется создавать объект, но хочется работать с определенными методами, свойствами класса. Например создание какого то калькулятора - проще юзать статические методы для вычислений - как в процедурном подходе, просто вызывая функцию. (Статика) В таком случае говорят что речь идет не об ооп а о классо орентированном программировании. Для работы со статикой нам абсолютно не нужно создавать объект (экземпляр класса)

в примере ниже, в классе Car мы создаем счетчик который считает количество созданных объектов. Увеличиваем $countCar на единичку при создании каждого нового объекта (new Car('someArguments'))

оператор :: двойное двоеточие - оператор разрешения области видимости (::) Paamayim Nekudotayim - на иврите (только для работы со статическими свойствами\методами??? IDN)

self - перевод = сам - используется чтобы обратиться к статическому свойству\методу внутри класса. self::getCount;
А снаружи класса к нему можно обратиться Car::getCount();

 Внутри статик методов естественно мы не можем использовать $this - тк они не имеют отношения к объекту.

self::$var - эта запись нужна чтобы обратиться к свойству либо методу класса (не объекта а именно класса) - проще говоря обратиться к статичному свойству или методу.
Вместо ::self мы можем написать имя класса - пример return Car::$countCar; - но хороший тон это писать ::self


************************** КОНСТАНТЫ *******************************
хранить константы (данные которые остаются не известными) в свойствах класса не хорошо. Для этого и существуют константы.
как и статитеские методы и свойства константы принадлежат классу(не объекту) определяются ключевым словом const. Название контсант принято писать в верхнем регистре разделяя слова нижним подчеркиванием. (TEST_CAR)
Обращаться к константам также как и к статическим свойствам/методам через ::self и через имя сласса Car::TEST_CAR

в пхп 5... по умолчанию константы и так являются public, с пхп 7.1 можно использовать public private protected

 также есть спец константа содержащая имя класса echo Car::class = выведет Car - она будет полезна при работе с пространствами имен.

*/

class Car
{

	public $color;
	public $wheels;
	public $speed = 180;
	public $brand; 

	public static $countCar = 0;

	const TEST_CAR = 'Прототип';
	const TEST_CAR_SPEED = 200;

	public function __construct($color, $wheels = 4, $speed, $brand) {
		$this->color = $color;
		$this->wheels = $wheels;
		$this->speed = $speed;
		$this->brand = $brand;

		self::$countCar++;
	}

	public static function getCount() {
		return self::$countCar;
	}

	public function Test() {
		echo "Hello, world!";
	}

	//определяем метод класса
	public function getCarInfo() {
		return "<h3>О моем авто</h3>
		Марка: {$this->brand} <br>
		Цвет: {$this->color} <br>
		Кол во колес: {$this->wheels} <br>
		Скорость: {$this->speed} <br>
		";
	} 	

	public function getPrototypeInfo() {
		return "<h3>Данные тестового авто</h3>
		Наименование: " . self::TEST_CAR . " <br>
		Скорость: " . self::TEST_CAR_SPEED . " <br>
		";
	}
}
