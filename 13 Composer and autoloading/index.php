<?php 
/*
урок №13 Composer и автозагрузка. Подключение библиотеки php mailer.

В php7 появилась возможность группировать классы находящиеся в одном пространстве имен. Пример:
Вместо
use classes\BookProduct;
use classes\LaptopProduct;

 Можно написать
use classes\{BookProduct, LaptopProduct};

Если активно используем сторонние библиотеки то удобно юзать composer.
Для примера пробуем вручную без композера подключить стороннюю библиотеку phpmailer. Видим что наша функция автозагрузки работает только с нашей папкой classes. А с папкой библиотеки phpmailer не работает (эту папку по логике нужно ложить отдельно, тк это целая папка, а не просто один файл). Поэтому нужно либо юзать простой regure либо создавать еще одну функцию автозагрузки отдельную, только для библиотеки пхпмаилер. А если будет еще десякок библиотек, тогда еще нужно будет создавать отдельные функции автозагрузки. Это можно но не нужно.
Ручная установка библиотеки phpmailer - скачать, закинуть в папку нашего проекта, подключить через require_once 'phpmailer/src/PHPMailer.php'; или новой отдельной функцией автозагрузки. Далее можно юзать $mail = new \PHPMailer\PHPMailer\PHPMailer();


В этом случае к нам на попощь спешит пакетный менеджер компосер и стандарты PSR (PSR-4).

 ------------------------------------------PSR стандарты----------------------------------------
Вкратце: эти стандарты - регламентируют правила написания кода (сколько пробелов, в каком регистре называть классы и тд).

Установка библиотеки phpmailer с помощью компосера:
Для работы с компосером нужен файл composer.json (package.json для npm). В json используется синтаксис объектов javascript.
В json файле нас интересуют 2 ключа. Первый require, это зависимости (те самые библиотеки, которые мы хотим использовать для нашего проекта). Например для пхпмаилер можно написать внутри. Или можно его установить другим способом composer require phpmailer/phpmailer (по типу как npm install --save-dev)
 и второй - autoload - тут мы указываем согласно какому стандарту мы хотим производить автозагрузку. (как я понимаю, что библиотеки которые мы загрузим будут иметь соответсвующий формат кода). Мы юзаем psr-4  - и мы должны указать где находятся наши классы, только наши, не библиотек. И задать для наших классов псевдоним:
 мы указываем "classes\\": "classes - то есть если ты встретишь в пространстве имен вот такой вот classes - тогда заходи в папку classes и все классы ищи именно там. Причем вместо classes\\ - можно указывать что то свое (какое то свое имя)

 Теперь нужно заюзать композер. В openserver он уже установлен - дополнительно - консоль. Открываем, переходим в консоли в папку проекта пишем composer install (= npm install) Данная команда основываясь на нашем файле composer.json создаст нужный нам автозагрузчик по стандарту psr-4 (файл autoload.php который нам нужно будет подключить) и создаст папку vendor (node_modules) в которую поместит сам компосер и все зависимости которые мы указывали в require{} Зависимости - это те самые библиотеки, которые мы хотим использовать для нашего проекта.

Подключаем файл autoload.php require_once __DIR__ . '/vendor/autoload.php'; - при этом наш старый автозагрузчик (spl_autoload_register('autoloader1');) нам больше не нужен. Композер уже сделал за нас автозагрузку (с учетом наших классов, о которых мы ему рассказали --> "classes\\": "classes - то есть если ты встретишь в пространстве имен вот такой вот classes - тогда заходи в папку classes и все классы ищи именно там.)

Далее мы для практике создаем папку rz_core внутри vendor и закидываем туда пару классов и интерфейсов. По типу что это ядро проекта. Правим в composer.json на "rz_core\\": "vendor/rz_core" и в файлах класса правим namespace.
 А папку classes переиминовываем в app, и также пишем еще правило  "app\\": "app" . Мы внесли изменения и нужно пересоздать автозагрузчик пишем в консоли composer dump-autoload (посмотреть все команды можно юзая composer)

 Теперь у нас используется только один автозагрузчик - это автозагрузчик композера - composer/autoload_psr4.php

 Далее установим стороннюю библиотеку пхпмайлер - в консоли composer require phpmailer/phpmailer - устанавливаем, в папке vendor появляется папка phpmailer, а в composer.json и в composer/autoload_psr4.php добавляется запись о нашей доп библиотеке. Ничего подключать нам не надо можно сразу юзать создавать экземпляр класса PHPMailer.
 Композер уже за меня все подключит в правильном порядке, не надо никаких require, просто ставлю библиотеки через композер.

------------------------------------------Установка композера вручную, для тех кто не юзает open server--------
там урок есть Гавлиленко - можно посмотреть с 29 00.


*/

use rz_core\interfaces\IGadget;
use app\BookProduct;
use app\LaptopProduct;

error_reporting(-1);

require_once __DIR__ . '/vendor/autoload.php';


function offerCase(IGadget $product) {
    echo "<p>Предлагаем чехол для гаджета {$product->getName()}</p>";
}

$book = new \app\BookProduct('Brave new world', 170, '200 страниц');
$laptop = new LaptopProduct('Macbook', '100000', 'core i7');

offerCase($laptop);

echo '<pre>';
print_r($book);
echo '</pre>';

$mail = new \PHPMailer\PHPMailer\PHPMailer();
echo '<pre>';
print_r($mail);
echo '</pre>';