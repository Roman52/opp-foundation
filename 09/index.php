<?php 
/*
урок №9 Модификаторы доступа 

Мы расширили класс Product классом BookProduct (class BookProduct extends Product) также мы можем и далее по цепочке расширять BookProduct и другими классами (class BookProduct1 extends BookProduct) и т.д.

Области видимости или модификаторы: (public, protected, private) - появились с php 5
Они не предназначены для защиты кода от взлома. Предназначены для контроля вашего кода. Если не шаришь - просто ставь везде public.

рекомендации когда что юзать:
для всех свойств изначально ставить private, для методов public, ну и по необходимости понижать контроль доступа, например для свойств которые предполагается юзать в классе наследнике ставим protected, для св-в которые предполагается использовать из вне класса ставим public. А для методов, которые явно являются служебными и пользователю явно не нужны можем ставить protected и реже private.

*/

error_reporting(-1);

require_once 'classes/Product.php';
require_once 'classes/BookProduct.php';

$book = new BookProduct('Brave new world', 170, '200 страниц');

echo '<pre>';
print_r($book);
echo '</pre>';

// echo $book->public; //видно
// echo $book->protected; // ошибка
// echo $book->private; // вообще ничего не знаем о таком свойстве


//echo $book->price; // сделали цену не доступной, т.к. нужно выводить не просто цену, а цену со скидкой, которая расчинывается. Так мы даем понять себе (если забыли) или при работе в команде другим прогерам, что свойство price создавалось не для вывода, а для расчета. Но если в дочернем классе мне нужно юзать свойство price для расчетов например, то я укажу модификатор protected - чтобы было доступно в дочерних классах и не доступно вне класса к выводу.

//$book->discount = 50; // есть вероятность случайно переопределить свойство из вне класса - это нам на фиг не надо.

echo $book->getDiscount();

echo $book->getProduct();